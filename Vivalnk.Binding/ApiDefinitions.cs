using System;
using CoreBluetooth;
using Foundation;
using ObjCRuntime;

namespace Vivalnk.Binding
{
    // @interface VVToolUseClass : NSObject
    [BaseType(typeof(NSObject))]
    public interface VVToolUseClass
    {
        // @property (assign, nonatomic) int rssi;
        [Export("rssi")]
        int Rssi { get; set; }

        // @property (copy, nonatomic) NSString * name;
        [Export("name")]
        string Name { get; set; }

        // @property (copy, nonatomic) NSString * fwVersion;
        [Export("fwVersion")]
        string FwVersion { get; set; }

        // @property (readwrite, copy, nonatomic) NSString * password;
        [Export("password")]
        string Password { get; set; }

        // @property (assign, readwrite, nonatomic) BOOL isEnc;
        [Export("isEnc")]
        bool IsEnc { get; set; }

        // @property (assign, nonatomic) NSInteger scanTimeout;
        [Export("scanTimeout")]
        nint ScanTimeout { get; set; }

        // @property (assign, nonatomic) NSInteger connectRetry;
        [Export("connectRetry")]
        nint ConnectRetry { get; set; }

        // @property (assign, nonatomic) NSInteger connectTimeout;
        [Export("connectTimeout")]
        nint ConnectTimeout { get; set; }
    }

    // @interface CardiacCommand : NSObject
    [BaseType(typeof(NSObject))]
    public interface CardiacCommand
    {
        // @property (copy, nonatomic) NSString * deviceId;
        [Export("deviceId")]
        string DeviceId { get; set; }

        // @property (assign, nonatomic) NSInteger timeOut;
        [Export("timeOut")]
        nint TimeOut { get; set; }

        // @property (assign, nonatomic) Cardiac_CommandType cardiacType;
        [Export("cardiacType", ArgumentSemantic.Assign)]
        Cardiac_CommandType CardiacType { get; set; }

        // @property (copy, nonatomic) NSString * info;
        [Export("info")]
        string Info { get; set; }
    }

    // @interface VitalCommand : NSObject
    [BaseType(typeof(NSObject))]
    public interface VitalCommand
    {
        // @property (copy, nonatomic) NSString * deviceId;
        [Export("deviceId")]
        string DeviceId { get; set; }

        // @property (assign, nonatomic) NSInteger timeOut;
        [Export("timeOut")]
        nint TimeOut { get; set; }

        // @property (assign, nonatomic) Vital_CommandType vitalType;
        [Export("vitalType", ArgumentSemantic.Assign)]
        Vital_CommandType VitalType { get; set; }

        // @property (copy, nonatomic) NSString * info;
        [Export("info")]
        string Info { get; set; }
    }

    [Model]
    [Protocol]
    [BaseType(typeof(NSObject))]
    public interface vlBLEDelegates
    {
        // @required -(void)onReceiveData:(id)Data;
        [Abstract]
        [Export("onReceiveData:")]
        void OnReceiveData(NSObject Data);

        // @optional -(void)onReceivedBatteryStatus:(id)result;
        [Export("onReceivedBatteryStatus:")]
        void OnReceivedBatteryStatus(NSObject result);

        // @optional -(void)onStart:(id)type __attribute__((availability(ios, introduced=1.0, deprecated=1.2.2)));
        [Introduced(PlatformName.iOS, 1, 0, message: "discard")]
        [Deprecated(PlatformName.iOS, 1, 2, 2, message: "discard")]
        [Export("onStart:")]
        void OnStart(NSObject type);

        // @optional -(void)onComplete:(id)result;
        [Export("onComplete:")]
        void OnComplete(NSObject result);

        // @optional -(void)onError:(id)error;
        [Export("onError:")]
        void OnError(NSObject error);
    }

    // @protocol BluetoothConnectListenerDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    public interface BluetoothConnectListenerDelegate
    {
        // @required -(void)onDisconnected:(VVToolUseClass *)device isForce:(BOOL)isForce;
        [Abstract]
        [Export("onDisconnected:isForce:")]
        void OnDisconnected(VVToolUseClass device, bool isForce);

        // @required -(void)onConnected:(VVToolUseClass *)device;
        [Abstract]
        [Export("onConnected:")]
        void OnConnected(VVToolUseClass device);

        // @required -(void)connectOnError:(int)code msg:(NSString *)msg;
        [Abstract]
        [Export("connectOnError:msg:")]
        void ConnectOnError(int code, string msg);

        // @required -(BOOL)onResume:(NSString *)deviceId;
        [Abstract]
        [Export("onResume:")]
        bool OnResume(string deviceId);

        // @optional -(void)connectOnStart __attribute__((availability(ios, introduced=1.0, deprecated=1.2.2)));
        [Introduced(PlatformName.iOS, 1, 0, message: "discard")]
        [Deprecated(PlatformName.iOS, 1, 2, 2, message: "discard")]
        [Export("connectOnStart")]
        void ConnectOnStart();

        // @optional -(void)onServiceReady __attribute__((availability(ios, introduced=1.0, deprecated=1.2.2)));
        [Introduced(PlatformName.iOS, 1, 0, message: "discard")]
        [Deprecated(PlatformName.iOS, 1, 2, 2, message: "discard")]
        [Export("onServiceReady")]
        void OnServiceReady();
    }

    // @protocol BluetoothScanListenerDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    public interface BluetoothScanListenerDelegate
    {
        // @required -(void)onDeviceFound:(VVToolUseClass *)device;
        [Abstract]
        [Export("onDeviceFound:")]
        void OnDeviceFound(VVToolUseClass device);

        // @optional -(void)onScanError:(int)code :(NSString *)msg;
        [Export("onScanError::")]
        void OnScanError(int code, string msg);
    }

    // @protocol BluetoothStateListenerDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    public interface BluetoothStateListenerDelegate
    {
        // @optional -(void)onBluetoothOpen;
        [Export("onBluetoothOpen")]
        void OnBluetoothOpen();

        // @optional -(void)onBluetoothClose;
        [Export("onBluetoothClose")]
        void OnBluetoothClose();

        // @optional -(void)onBluetoothSwitchToOnStatus;
        [Export("onBluetoothSwitchToOnStatus")]
        void OnBluetoothSwitchToOnStatus();
    }

    // @interface VVBleManager : NSObject <CBCentralManagerDelegate, CBPeripheralDelegate>
    [BaseType(typeof(NSObject))]
    public interface VVBleManager : ICBCentralManagerDelegate, ICBPeripheralDelegate
    {
        // @property (assign, nonatomic) BOOL bleReconnectEnabled;
        [Export("bleReconnectEnabled")]
        bool BleReconnectEnabled { get; set; }

        // @property (readonly, assign, nonatomic) BOOL isConnected;
        [Export("isConnected")]
        bool IsConnected { get; }

        [Wrap("WeakDelegate")]
        vlBLEDelegates Delegate { get; set; }

        // @property (assign, nonatomic) id<vlBLEDelegates> delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        [Wrap("WeakConnectDelegate")]
        BluetoothConnectListenerDelegate ConnectDelegate { get; set; }

        // @property (assign, nonatomic) id<BluetoothConnectListenerDelegate> connectDelegate;
        [NullAllowed, Export("connectDelegate", ArgumentSemantic.Assign)]
        NSObject WeakConnectDelegate { get; set; }

        [Wrap("WeakScanDelegate")]
        BluetoothScanListenerDelegate ScanDelegate { get; set; }

        // @property (assign, nonatomic) id<BluetoothScanListenerDelegate> scanDelegate;
        [NullAllowed, Export("scanDelegate", ArgumentSemantic.Assign)]
        NSObject WeakScanDelegate { get; set; }

        [Wrap("WeakBleStateDelegate")]
        BluetoothStateListenerDelegate BleStateDelegate { get; set; }

        // @property (assign, nonatomic) id<BluetoothStateListenerDelegate> bleStateDelegate;
        [NullAllowed, Export("bleStateDelegate", ArgumentSemantic.Assign)]
        NSObject WeakBleStateDelegate { get; set; }

        // +(instancetype)shareInstance;
        [Static]
        [Export("shareInstance")]
        VVBleManager ShareInstance();

        // -(void)startScan:(VVToolUseClass *)options withDeviceType:(ScanDeviceType)deviceType;
        [Export("startScan:withDeviceType:")]
        void StartScan(VVToolUseClass options, ScanDeviceType deviceType);

        // -(void)stopScan;
        [Export("stopScan")]
        void StopScan();

        // -(void)connect:(VVToolUseClass *)options;
        [Export("connect:")]
        void Connect(VVToolUseClass options);

        // -(void)disconnect:(ScanDeviceType)deviceType withDeviceID:(NSString *)deviceId;
        [Export("disconnect:withDeviceID:")]
        void Disconnect(ScanDeviceType deviceType, string deviceId);

        // -(void)sendCardiacCommand:(CardiacCommand *)request;
        [Export("sendCardiacCommand:")]
        void SendCardiacCommand(CardiacCommand request);

        // -(void)sendVitalCommand:(VitalCommand *)request;
        [Export("sendVitalCommand:")]
        void SendVitalCommand(VitalCommand request);

        // -(void)startAutomaticReconnectAfterAppLaunch:(NSInteger)connectTime withComplex:(void (^)(BOOL, NSString *))complex;
        [Export("startAutomaticReconnectAfterAppLaunch:withComplex:")]
        void StartAutomaticReconnectAfterAppLaunch(nint connectTime, Action<bool, NSString> complex);

        // -(NSArray *)getAllConnectedDeviceID;
        [Export("getAllConnectedDeviceID")]
        //[Verify(MethodToProperty), Verify(StronglyTypedNSArray)]
        NSObject[] AllConnectedDeviceID { get; }

        // -(int)checkBle;
        [Export("checkBle")]
        //[Verify(MethodToProperty)]
        int CheckBle { get; }

        // -(NSString *)getVersion;
        [Export("getVersion")]
        //[Verify(MethodToProperty)]
        string Version { get; }

        // -(void)printLog:(BOOL)show;
        [Export("printLog:")]
        void PrintLog(bool show);

        // -(void)enableAutoDataSampling;
        [Export("enableAutoDataSampling")]
        void EnableAutoDataSampling();

        // -(BOOL)callbackACKCommand:(NSString *)deviceName;
        [Export("callbackACKCommand:")]
        bool CallbackACKCommand(string deviceName);
    }
}
