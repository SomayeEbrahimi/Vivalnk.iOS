using System;
using CoreBluetooth;
using Foundation;
using ObjCRuntime;

namespace Vivalnk.Binding
{
	// @interface DFUUuid : NSObject
	[BaseType(typeof(NSObject), Name = "_TtC10VivalnkSDK7DFUUuid")]
	[DisableDefaultCtor]
	interface DFUUuid
	{
		// @property (readonly, nonatomic, strong) CBUUID * _Nonnull uuid;
		[Export("uuid", ArgumentSemantic.Strong)]
		CBUUID Uuid { get; }

		// @property (readonly, nonatomic) enum VVDFUUuidType type;
		[Export("type")]
		VVDFUUuidType Type { get; }

		// -(instancetype _Nonnull)initWithUUID:(CBUUID * _Nonnull)withUUID forType:(enum VVDFUUuidType)forType __attribute__((objc_designated_initializer));
		[Export("initWithUUID:forType:")]
		[DesignatedInitializer]
		IntPtr Constructor(CBUUID withUUID, VVDFUUuidType forType);

		// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
		[Static]
		[Export("new")]
		DFUUuid New();
	}

	// @interface VVDFUFirmware : NSObject
	[BaseType(typeof(NSObject), Name = "_TtC10VivalnkSDK13VVDFUFirmware")]
	[DisableDefaultCtor]
	interface VVDFUFirmware
	{
		// @property (readonly, copy, nonatomic) NSString * _Nullable fileName;
		[NullAllowed, Export("fileName")]
		string FileName { get; }

		// @property (readonly, copy, nonatomic) NSURL * _Nullable fileUrl;
		[NullAllowed, Export("fileUrl", ArgumentSemantic.Copy)]
		NSUrl FileUrl { get; }

		// @property (readonly, nonatomic) BOOL valid;
		[Export("valid")]
		bool Valid { get; }

		// @property (readonly, nonatomic, strong) VVDFUFirmwareSize * _Nonnull size;
		[Export("size", ArgumentSemantic.Strong)]
		VVDFUFirmwareSize Size { get; }

		// @property (readonly, nonatomic) NSInteger parts;
		[Export("parts")]
		nint Parts { get; }

		// -(instancetype _Nullable)initWithUrlToZipFile:(NSURL * _Nonnull)urlToZipFile;
		[Export("initWithUrlToZipFile:")]
		IntPtr Constructor(NSUrl urlToZipFile);

		// -(instancetype _Nullable)initWithUrlToZipFile:(NSURL * _Nonnull)urlToZipFile type:(enum VVDFUFirmwareType)type __attribute__((objc_designated_initializer));
		[Export("initWithUrlToZipFile:type:")]
		[DesignatedInitializer]
		IntPtr Constructor(NSUrl urlToZipFile, VVDFUFirmwareType type);

		// -(instancetype _Nullable)initWithZipFile:(NSData * _Nonnull)zipFile;
		[Export("initWithZipFile:")]
		IntPtr Constructor(NSData zipFile);

		// -(instancetype _Nullable)initWithZipFile:(NSData * _Nonnull)zipFile type:(enum VVDFUFirmwareType)type __attribute__((objc_designated_initializer));
		[Export("initWithZipFile:type:")]
		[DesignatedInitializer]
		IntPtr Constructor(NSData zipFile, VVDFUFirmwareType type);

		// -(instancetype _Nullable)initWithUrlToBinOrHexFile:(NSURL * _Nonnull)urlToBinOrHexFile urlToDatFile:(NSURL * _Nullable)urlToDatFile type:(enum VVDFUFirmwareType)type __attribute__((objc_designated_initializer));
		[Export("initWithUrlToBinOrHexFile:urlToDatFile:type:")]
		[DesignatedInitializer]
		IntPtr Constructor(NSUrl urlToBinOrHexFile, [NullAllowed] NSUrl urlToDatFile, VVDFUFirmwareType type);

		// -(instancetype _Nullable)initWithBinFile:(NSData * _Nonnull)binFile datFile:(NSData * _Nullable)datFile type:(enum VVDFUFirmwareType)type __attribute__((objc_designated_initializer));
		[Export("initWithBinFile:datFile:type:")]
		[DesignatedInitializer]
		IntPtr Constructor(NSData binFile, [NullAllowed] NSData datFile, VVDFUFirmwareType type);

		// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
		[Static]
		[Export("new")]
		VVDFUFirmware New();
	}

	// @interface VVDFUFirmwareSize : NSObject
	[BaseType(typeof(NSObject), Name = "_TtC10VivalnkSDK17VVDFUFirmwareSize")]
	[DisableDefaultCtor]
	interface VVDFUFirmwareSize
	{
		// @property (readonly, nonatomic) uint32_t softdevice;
		[Export("softdevice")]
		uint Softdevice { get; }

		// @property (readonly, nonatomic) uint32_t bootloader;
		[Export("bootloader")]
		uint Bootloader { get; }

		// @property (readonly, nonatomic) uint32_t application;
		[Export("application")]
		uint Application { get; }

		// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
		[Static]
		[Export("new")]
		VVDFUFirmwareSize New();
	}

	// @protocol VVDFUPeripheralSelectorDelegate
	[Protocol(Name = "_TtP10VivalnkSDK31VVDFUPeripheralSelectorDelegate_"), Model(AutoGeneratedName = true)]
	interface VVDFUPeripheralSelectorDelegate
	{
		// @required -(BOOL)select:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *,id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI hint:(NSString * _Nullable)name __attribute__((warn_unused_result("")));
		[Abstract]
		[Export("select:advertisementData:RSSI:hint:")]
		bool Select(CBPeripheral peripheral, NSDictionary<NSString, NSObject> advertisementData, NSNumber RSSI, [NullAllowed] string name);

		// @required -(NSArray<CBUUID *> * _Nullable)filterByHint:(CBUUID * _Nonnull)dfuServiceUUID __attribute__((warn_unused_result("")));
		[Abstract]
		[Export("filterByHint:")]
		[return: NullAllowed]
		CBUUID[] FilterByHint(CBUUID dfuServiceUUID);
	}

	// @interface VVDFUPeripheralSelector : NSObject <VVDFUPeripheralSelectorDelegate>
	[BaseType(typeof(NSObject), Name = "_TtC10VivalnkSDK23VVDFUPeripheralSelector")]
	interface VVDFUPeripheralSelector
	{
		// -(BOOL)select:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *,id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI hint:(NSString * _Nullable)name __attribute__((warn_unused_result("")));
		[Export("select:advertisementData:RSSI:hint:")]
		bool Select(CBPeripheral peripheral, NSDictionary<NSString, NSObject> advertisementData, NSNumber RSSI, [NullAllowed] string name);

		// -(NSArray<CBUUID *> * _Nullable)filterByHint:(CBUUID * _Nonnull)dfuServiceUUID __attribute__((warn_unused_result("")));
		[Export("filterByHint:")]
		[return: NullAllowed]
		CBUUID[] FilterByHint(CBUUID dfuServiceUUID);
	}

	// @protocol VVDFUProgressDelegate
	[Protocol(Name = "_TtP10VivalnkSDK21VVDFUProgressDelegate_"), Model(AutoGeneratedName = true)]
	interface VVDFUProgressDelegate
	{
		// @required -(void)dfuProgressDidChangeFor:(NSInteger)part outOf:(NSInteger)totalParts to:(NSInteger)progress currentSpeedBytesPerSecond:(double)currentSpeedBytesPerSecond avgSpeedBytesPerSecond:(double)avgSpeedBytesPerSecond;
		[Abstract]
		[Export("dfuProgressDidChangeFor:outOf:to:currentSpeedBytesPerSecond:avgSpeedBytesPerSecond:")]
		void OutOf(nint part, nint totalParts, nint progress, double currentSpeedBytesPerSecond, double avgSpeedBytesPerSecond);
	}

	// @interface VVDFUServiceController : NSObject
	[BaseType(typeof(NSObject), Name = "_TtC10VivalnkSDK22VVDFUServiceController")]
	[DisableDefaultCtor]
	interface VVDFUServiceController
	{
		// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
		[Static]
		[Export("new")]
		VVDFUServiceController New();

		// -(void)pause;
		[Export("pause")]
		void Pause();

		// -(void)resume;
		[Export("resume")]
		void Resume();

		// -(BOOL)abort __attribute__((warn_unused_result("")));
		[Export("abort")]
		bool Abort { get; }

		// -(void)restart;
		[Export("restart")]
		void Restart();

		// @property (readonly, nonatomic) BOOL paused;
		[Export("paused")]
		bool Paused { get; }

		// @property (readonly, nonatomic) BOOL aborted;
		[Export("aborted")]
		bool Aborted { get; }
	}

	// @protocol VVDFUServiceDelegate
	[Protocol(Name = "_TtP10VivalnkSDK20VVDFUServiceDelegate_"), Model(AutoGeneratedName = true)]
	interface VVDFUServiceDelegate
	{
		// @required -(void)dfuStateDidChangeTo:(enum VVDFUState)state;
		[Abstract]
		[Export("dfuStateDidChangeTo:")]
		void DfuStateDidChangeTo(VVDFUState state);

		// @required -(void)dfuError:(enum VVDFUError)error didOccurWithMessage:(NSString * _Nonnull)message;
		[Abstract]
		[Export("dfuError:didOccurWithMessage:")]
		void DfuError(VVDFUError error, string message);
	}

	// @interface VVDFUServiceInitiator : NSObject
	[BaseType(typeof(NSObject), Name = "_TtC10VivalnkSDK21VVDFUServiceInitiator")]
	[DisableDefaultCtor]
	interface VVDFUServiceInitiator
	{
		// @property (nonatomic, weak) id<VVDFUServiceDelegate> _Nullable delegate;
		[NullAllowed, Export("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		// @property (nonatomic, weak) id<VVDFUProgressDelegate> _Nullable progressDelegate;
		[NullAllowed, Export("progressDelegate", ArgumentSemantic.Weak)]
		NSObject WeakProgressDelegate { get; set; }

		// @property (nonatomic) uint16_t packetReceiptNotificationParameter;
		[Export("packetReceiptNotificationParameter")]
		ushort PacketReceiptNotificationParameter { get; set; }

		// @property (nonatomic) BOOL forceDfu;
		[Export("forceDfu")]
		bool ForceDfu { get; set; }

		// @property (nonatomic) BOOL forceScanningForNewAddressInLegacyDfu;
		[Export("forceScanningForNewAddressInLegacyDfu")]
		bool ForceScanningForNewAddressInLegacyDfu { get; set; }

		// @property (nonatomic) NSTimeInterval connectionTimeout;
		[Export("connectionTimeout")]
		double ConnectionTimeout { get; set; }

		// @property (nonatomic) NSTimeInterval dataObjectPreparationDelay;
		[Export("dataObjectPreparationDelay")]
		double DataObjectPreparationDelay { get; set; }

		// @property (nonatomic) BOOL alternativeAdvertisingNameEnabled;
		[Export("alternativeAdvertisingNameEnabled")]
		bool AlternativeAdvertisingNameEnabled { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable alternativeAdvertisingName;
		[NullAllowed, Export("alternativeAdvertisingName")]
		string AlternativeAdvertisingName { get; set; }

		// @property (nonatomic) BOOL enableUnsafeExperimentalButtonlessServiceInSecureDfu;
		[Export("enableUnsafeExperimentalButtonlessServiceInSecureDfu")]
		bool EnableUnsafeExperimentalButtonlessServiceInSecureDfu { get; set; }

		// @property (nonatomic, strong) VVDFUUuidHelper * _Nonnull uuidHelper;
		[Export("uuidHelper", ArgumentSemantic.Strong)]
		VVDFUUuidHelper UuidHelper { get; set; }

		// @property (nonatomic) BOOL disableResume;
		[Export("disableResume")]
		bool DisableResume { get; set; }

		// -(instancetype _Nonnull)initWithCentralManager:(CBCentralManager * _Nonnull)centralManager target:(CBPeripheral * _Nonnull)target __attribute__((objc_designated_initializer));
		[Export("initWithCentralManager:target:")]
		[DesignatedInitializer]
		IntPtr Constructor(CBCentralManager centralManager, CBPeripheral target);

		// -(VVDFUServiceInitiator * _Nonnull)withFirmware:(VVDFUFirmware * _Nonnull)file __attribute__((warn_unused_result("")));
		[Export("withFirmware:")]
		VVDFUServiceInitiator WithFirmware(VVDFUFirmware file);

		// -(VVDFUServiceController * _Nullable)start __attribute__((warn_unused_result(""))) __attribute__((deprecated("Use start(target: CBPeripheral) instead.")));
		[NullAllowed, Export("start")]
		VVDFUServiceController Start { get; }

		// -(VVDFUServiceController * _Nullable)startWithTarget:(CBPeripheral * _Nonnull)target __attribute__((warn_unused_result("")));
		[Export("startWithTarget:")]
		[return: NullAllowed]
		VVDFUServiceController StartWithTarget(CBPeripheral target);

		// -(VVDFUServiceController * _Nullable)startWithTargetWithIdentifier:(NSUUID * _Nonnull)uuid __attribute__((warn_unused_result("")));
		[Export("startWithTargetWithIdentifier:")]
		[return: NullAllowed]
		VVDFUServiceController StartWithTargetWithIdentifier(NSUuid uuid);

		// +(instancetype _Nonnull)new __attribute__((deprecated("-init is unavailable")));
		[Static]
		[Export("new")]
		VVDFUServiceInitiator New();
	}

	// @interface VVDFUUuidHelper : NSObject
	[BaseType(typeof(NSObject), Name = "_TtC10VivalnkSDK15VVDFUUuidHelper")]
	interface VVDFUUuidHelper
	{
		// @property (readonly, nonatomic, strong) CBUUID * _Nonnull legacyDFUService;
		[Export("legacyDFUService", ArgumentSemantic.Strong)]
		CBUUID LegacyDFUService { get; }

		// @property (readonly, nonatomic, strong) CBUUID * _Nonnull legacyDFUControlPoint;
		[Export("legacyDFUControlPoint", ArgumentSemantic.Strong)]
		CBUUID LegacyDFUControlPoint { get; }

		// @property (readonly, nonatomic, strong) CBUUID * _Nonnull legacyDFUPacket;
		[Export("legacyDFUPacket", ArgumentSemantic.Strong)]
		CBUUID LegacyDFUPacket { get; }

		// @property (readonly, nonatomic, strong) CBUUID * _Nonnull legacyDFUVersion;
		[Export("legacyDFUVersion", ArgumentSemantic.Strong)]
		CBUUID LegacyDFUVersion { get; }

		// @property (readonly, nonatomic, strong) CBUUID * _Nonnull secureDFUService;
		[Export("secureDFUService", ArgumentSemantic.Strong)]
		CBUUID SecureDFUService { get; }

		// @property (readonly, nonatomic, strong) CBUUID * _Nonnull secureDFUControlPoint;
		[Export("secureDFUControlPoint", ArgumentSemantic.Strong)]
		CBUUID SecureDFUControlPoint { get; }

		// @property (readonly, nonatomic, strong) CBUUID * _Nonnull secureDFUPacket;
		[Export("secureDFUPacket", ArgumentSemantic.Strong)]
		CBUUID SecureDFUPacket { get; }

		// @property (readonly, nonatomic, strong) CBUUID * _Nonnull buttonlessExperimentalService;
		[Export("buttonlessExperimentalService", ArgumentSemantic.Strong)]
		CBUUID ButtonlessExperimentalService { get; }

		// @property (readonly, nonatomic, strong) CBUUID * _Nonnull buttonlessExperimentalCharacteristic;
		[Export("buttonlessExperimentalCharacteristic", ArgumentSemantic.Strong)]
		CBUUID ButtonlessExperimentalCharacteristic { get; }

		// @property (readonly, nonatomic, strong) CBUUID * _Nonnull buttonlessWithoutBonds;
		[Export("buttonlessWithoutBonds", ArgumentSemantic.Strong)]
		CBUUID ButtonlessWithoutBonds { get; }

		// @property (readonly, nonatomic, strong) CBUUID * _Nonnull buttonlessWithBonds;
		[Export("buttonlessWithBonds", ArgumentSemantic.Strong)]
		CBUUID ButtonlessWithBonds { get; }

		// -(instancetype _Nonnull)initWithCustomUuids:(NSArray<DFUUuid *> * _Nonnull)uuids;
		[Export("initWithCustomUuids:")]
		IntPtr Constructor(DFUUuid[] uuids);
	}

	// @interface VVIntelHex2BinConverter : NSObject
	[BaseType(typeof(NSObject), Name = "_TtC10VivalnkSDK23VVIntelHex2BinConverter")]
	interface VVIntelHex2BinConverter
	{
	}

	// @interface VVLegacyDFUServiceInitiator : VVDFUServiceInitiator
	[BaseType(typeof(VVDFUServiceInitiator), Name = "_TtC10VivalnkSDK27VVLegacyDFUServiceInitiator")]
	interface VVLegacyDFUServiceInitiator
	{
		// -(VVDFUServiceController * _Nullable)startWithTargetWithIdentifier:(NSUUID * _Nonnull)uuid __attribute__((warn_unused_result("")));
		[Export("startWithTargetWithIdentifier:")]
		[return: NullAllowed]
		VVDFUServiceController StartWithTargetWithIdentifier(NSUuid uuid);

		// -(instancetype _Nonnull)initWithCentralManager:(CBCentralManager * _Nonnull)centralManager target:(CBPeripheral * _Nonnull)target __attribute__((objc_designated_initializer));
		[Export("initWithCentralManager:target:")]
		[DesignatedInitializer]
		IntPtr Constructor(CBCentralManager centralManager, CBPeripheral target);
	}

	// @protocol VVLoggerDelegate
	[Protocol(Name = "_TtP10VivalnkSDK16VVLoggerDelegate_"), Model(AutoGeneratedName = true)]
	interface VVLoggerDelegate
	{
		// @required -(void)logWith:(enum VVLogLevel)level message:(NSString * _Nonnull)message;
		[Abstract]
		[Export("logWith:message:")]
		void Message(VVLogLevel level, string message);
	}

	// @interface VVSecureDFUServiceInitiator : VVDFUServiceInitiator
	[BaseType(typeof(VVDFUServiceInitiator), Name = "_TtC10VivalnkSDK27VVSecureDFUServiceInitiator")]
	interface VVSecureDFUServiceInitiator
	{
		// -(VVDFUServiceController * _Nullable)startWithTargetWithIdentifier:(NSUUID * _Nonnull)uuid __attribute__((warn_unused_result("")));
		[Export("startWithTargetWithIdentifier:")]
		[return: NullAllowed]
		VVDFUServiceController StartWithTargetWithIdentifier(NSUuid uuid);

		// -(instancetype _Nonnull)initWithCentralManager:(CBCentralManager * _Nonnull)centralManager target:(CBPeripheral * _Nonnull)target __attribute__((objc_designated_initializer));
		[Export("initWithCentralManager:target:")]
		[DesignatedInitializer]
		IntPtr Constructor(CBCentralManager centralManager, CBPeripheral target);
}

	// @interface VVToolUseClass : NSObject
	[BaseType(typeof(NSObject))]
    public interface VVToolUseClass
    {
        // @property (assign, nonatomic) int rssi;
        [Export("rssi")]
        int Rssi { get; set; }

        // @property (copy, nonatomic) NSString * name;
        [Export("name")]
        string Name { get; set; }

        // @property (copy, nonatomic) NSString * fwVersion;
        [Export("fwVersion")]
        string FwVersion { get; set; }

        // @property (readwrite, copy, nonatomic) NSString * password;
        [Export("password")]
        string Password { get; set; }

        // @property (assign, readwrite, nonatomic) BOOL isEnc;
        [Export("isEnc")]
        bool IsEnc { get; set; }

        // @property (assign, nonatomic) NSInteger scanTimeout;
        [Export("scanTimeout")]
        nint ScanTimeout { get; set; }

        // @property (assign, nonatomic) NSInteger connectRetry;
        [Export("connectRetry")]
        nint ConnectRetry { get; set; }

        // @property (assign, nonatomic) NSInteger connectTimeout;
        [Export("connectTimeout")]
        nint ConnectTimeout { get; set; }
    }

    // @interface CardiacCommand : NSObject
    [BaseType(typeof(NSObject))]
    public interface CardiacCommand
    {
        // @property (copy, nonatomic) NSString * deviceId;
        [Export("deviceId")]
        string DeviceId { get; set; }

        // @property (assign, nonatomic) NSInteger timeOut;
        [Export("timeOut")]
        nint TimeOut { get; set; }

        // @property (assign, nonatomic) Cardiac_CommandType cardiacType;
        [Export("cardiacType", ArgumentSemantic.Assign)]
        Cardiac_CommandType CardiacType { get; set; }

        // @property (copy, nonatomic) NSString * info;
        [Export("info")]
        string Info { get; set; }
    }

    // @interface VitalCommand : NSObject
    [BaseType(typeof(NSObject))]
    public interface VitalCommand
    {
        // @property (copy, nonatomic) NSString * deviceId;
        [Export("deviceId")]
        string DeviceId { get; set; }

        // @property (assign, nonatomic) NSInteger timeOut;
        [Export("timeOut")]
        nint TimeOut { get; set; }

        // @property (assign, nonatomic) Vital_CommandType vitalType;
        [Export("vitalType", ArgumentSemantic.Assign)]
        Vital_CommandType VitalType { get; set; }

        // @property (copy, nonatomic) NSString * info;
        [Export("info")]
        string Info { get; set; }
    }

    [Model]
    [Protocol]
    [BaseType(typeof(NSObject))]
    public interface vlBLEDelegates
    {
        // @required -(void)onReceiveData:(id)Data;
        [Abstract]
        [Export("onReceiveData:")]
        void OnReceiveData(NSObject Data);

        // @optional -(void)onReceivedBatteryStatus:(id)result;
        [Export("onReceivedBatteryStatus:")]
        void OnReceivedBatteryStatus(NSObject result);

        // @optional -(void)onStart:(id)type __attribute__((availability(ios, introduced=1.0, deprecated=1.2.2)));
        [Introduced(PlatformName.iOS, 1, 0, message: "discard")]
        [Deprecated(PlatformName.iOS, 1, 2, 2, message: "discard")]
        [Export("onStart:")]
        void OnStart(NSObject type);

        // @optional -(void)onComplete:(id)result;
        [Export("onComplete:")]
        void OnComplete(NSObject result);

        // @optional -(void)onError:(id)error;
        [Export("onError:")]
        void OnError(NSObject error);
    }

    // @protocol BluetoothConnectListenerDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    public interface BluetoothConnectListenerDelegate
    {
        // @required -(void)onDisconnected:(VVToolUseClass *)device isForce:(BOOL)isForce;
        [Abstract]
        [Export("onDisconnected:isForce:")]
        void OnDisconnected(VVToolUseClass device, bool isForce);

        // @required -(void)onConnected:(VVToolUseClass *)device;
        [Abstract]
        [Export("onConnected:")]
        void OnConnected(VVToolUseClass device);

        // @required -(void)connectOnError:(int)code msg:(NSString *)msg;
        [Abstract]
        [Export("connectOnError:msg:")]
        void ConnectOnError(int code, string msg);

        // @required -(BOOL)onResume:(NSString *)deviceId;
        [Abstract]
        [Export("onResume:")]
        bool OnResume(string deviceId);

        // @optional -(void)connectOnStart __attribute__((availability(ios, introduced=1.0, deprecated=1.2.2)));
        [Introduced(PlatformName.iOS, 1, 0, message: "discard")]
        [Deprecated(PlatformName.iOS, 1, 2, 2, message: "discard")]
        [Export("connectOnStart")]
        void ConnectOnStart();

        // @optional -(void)onServiceReady __attribute__((availability(ios, introduced=1.0, deprecated=1.2.2)));
        [Introduced(PlatformName.iOS, 1, 0, message: "discard")]
        [Deprecated(PlatformName.iOS, 1, 2, 2, message: "discard")]
        [Export("onServiceReady")]
        void OnServiceReady();
    }

    // @protocol BluetoothScanListenerDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    public interface BluetoothScanListenerDelegate
    {
        // @required -(void)onDeviceFound:(VVToolUseClass *)device;
        [Abstract]
        [Export("onDeviceFound:")]
        void OnDeviceFound(VVToolUseClass device);

        // @optional -(void)onScanError:(int)code :(NSString *)msg;
        [Export("onScanError::")]
        void OnScanError(int code, string msg);
    }

    // @protocol BluetoothStateListenerDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    public interface BluetoothStateListenerDelegate
    {
        // @optional -(void)onBluetoothOpen;
        [Export("onBluetoothOpen")]
        void OnBluetoothOpen();

        // @optional -(void)onBluetoothClose;
        [Export("onBluetoothClose")]
        void OnBluetoothClose();

        // @optional -(void)onBluetoothSwitchToOnStatus;
        [Export("onBluetoothSwitchToOnStatus")]
        void OnBluetoothSwitchToOnStatus();
    }

    // @interface VVBleManager : NSObject <CBCentralManagerDelegate, CBPeripheralDelegate>
    [BaseType(typeof(NSObject))]
    public interface VVBleManager : ICBCentralManagerDelegate, ICBPeripheralDelegate
    {
        // @property (assign, nonatomic) BOOL bleReconnectEnabled;
        [Export("bleReconnectEnabled")]
        bool BleReconnectEnabled { get; set; }

        // @property (readonly, assign, nonatomic) BOOL isConnected;
        [Export("isConnected")]
        bool IsConnected { get; }

        [Wrap("WeakDelegate")]
        vlBLEDelegates Delegate { get; set; }

        // @property (assign, nonatomic) id<vlBLEDelegates> delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        [Wrap("WeakConnectDelegate")]
        BluetoothConnectListenerDelegate ConnectDelegate { get; set; }

        // @property (assign, nonatomic) id<BluetoothConnectListenerDelegate> connectDelegate;
        [NullAllowed, Export("connectDelegate", ArgumentSemantic.Assign)]
        NSObject WeakConnectDelegate { get; set; }

        [Wrap("WeakScanDelegate")]
        BluetoothScanListenerDelegate ScanDelegate { get; set; }

        // @property (assign, nonatomic) id<BluetoothScanListenerDelegate> scanDelegate;
        [NullAllowed, Export("scanDelegate", ArgumentSemantic.Assign)]
        NSObject WeakScanDelegate { get; set; }

        [Wrap("WeakBleStateDelegate")]
        BluetoothStateListenerDelegate BleStateDelegate { get; set; }

        // @property (assign, nonatomic) id<BluetoothStateListenerDelegate> bleStateDelegate;
        [NullAllowed, Export("bleStateDelegate", ArgumentSemantic.Assign)]
        NSObject WeakBleStateDelegate { get; set; }

        // +(instancetype)shareInstance;
        [Static]
        [Export("shareInstance")]
        VVBleManager ShareInstance();

        // -(void)startScan:(VVToolUseClass *)options withDeviceType:(ScanDeviceType)deviceType;
        [Export("startScan:withDeviceType:")]
        void StartScan(VVToolUseClass options, ScanDeviceType deviceType);

        // -(void)stopScan;
        [Export("stopScan")]
        void StopScan();

        // -(void)connect:(VVToolUseClass *)options;
        [Export("connect:")]
        void Connect(VVToolUseClass options);

        // -(void)disconnect:(ScanDeviceType)deviceType withDeviceID:(NSString *)deviceId;
        [Export("disconnect:withDeviceID:")]
        void Disconnect(ScanDeviceType deviceType, string deviceId);

        // -(void)sendCardiacCommand:(CardiacCommand *)request;
        [Export("sendCardiacCommand:")]
        void SendCardiacCommand(CardiacCommand request);

        // -(void)sendVitalCommand:(VitalCommand *)request;
        [Export("sendVitalCommand:")]
        void SendVitalCommand(VitalCommand request);

        // -(void)startAutomaticReconnectAfterAppLaunch:(NSInteger)connectTime withComplex:(void (^)(BOOL, NSString *))complex;
        [Export("startAutomaticReconnectAfterAppLaunch:withComplex:")]
        void StartAutomaticReconnectAfterAppLaunch(nint connectTime, Action<bool, NSString> complex);

        // -(NSArray *)getAllConnectedDeviceID;
        [Export("getAllConnectedDeviceID")]
        NSObject[] AllConnectedDeviceID { get; }

        // -(int)checkBle;
        [Export("checkBle")]
        int CheckBle { get; }

        // -(NSString *)getVersion;
        [Export("getVersion")]
        string Version { get; }

        // -(void)printLog:(BOOL)show;
        [Export("printLog:")]
        void PrintLog(bool show);

        // -(void)enableAutoDataSampling;
        [Export("enableAutoDataSampling")]
        void EnableAutoDataSampling();

        // -(BOOL)callbackACKCommand:(NSString *)deviceName;
        [Export("callbackACKCommand:")]
        bool CallbackACKCommand(string deviceName);
    }
}
